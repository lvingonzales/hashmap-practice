(()=>{"use strict";var __webpack_modules__={72:()=>{eval("\n;// ./src/LinkedList.js\nclass LinkedList {\r\n    constructor () {\r\n        this.list = [];\r\n    }\r\n\r\n    append(value) {\r\n        let newNode = new Node;\r\n        newNode.value = value;\r\n\r\n        // Changing the nextNode of the previous tail\r\n        if (this.size() >= 2) {\r\n            this.tail().nextNode = newNode;\r\n        }\r\n\r\n        this.list.push(newNode);  \r\n    }\r\n\r\n    prepend (value) {\r\n        let newNode = new Node;\r\n        newNode = {value:value, nextNode: this.list[0]};\r\n        this.list.unshift(newNode);\r\n    }\r\n\r\n    size () {\r\n        return this.list.length;\r\n    }\r\n\r\n    head () {\r\n        return this.list[0];\r\n    }\r\n\r\n    tail() {\r\n        return this.list[this.size() - 1];\r\n    }\r\n\r\n    at(index) {\r\n        if(index > (this.size() - 1) || index < 0) {return console.error('Index not within List!');}\r\n        return this.list[index];\r\n    }\r\n\r\n    pop() {\r\n        if (!this.size){return console.error('List Empty!');}\r\n        this.list.pop();\r\n        this.tail().nextNode = null;\r\n    }\r\n\r\n    contains(value) {\r\n        const values = this.list.map(nodes => nodes);\r\n        if (!values.includes(value)) {return console.error ('Node not found!');}\r\n        return values.includes(value);\r\n    }\r\n\r\n    find(value) {\r\n        const values = this.list.map(nodes => nodes);\r\n        if (this.contains(value)) {return values.findIndex((foo) => foo === value);};\r\n    }\r\n\r\n    toString() {\r\n        let string;\r\n        const values = this.list.map(nodes => nodes.value);\r\n        for (let i = 0; i <= this.size(); i++) {\r\n            if (i === 0) {\r\n                string = `( key:${values[i].key}, value:${values[i].value} )`;\r\n                continue;\r\n            }\r\n\r\n            if (!values[i]){\r\n                string = string + ` ->  null `;\r\n                continue;\r\n            }\r\n\r\n            string = string + ` -> ( key:${values[i].key}, value:${values[i].value} )`;\r\n        }\r\n\r\n        return string;\r\n    }\r\n\r\n    insertAt(value, index){\r\n        let newNode = new Node();\r\n        newNode.value = value;\r\n\r\n        if(this.list[index]) {\r\n            newNode.nextNode = this.list[index];\r\n        }\r\n\r\n        this.list.splice(index, 0, newNode);\r\n\r\n        this.list[index-1].nextNode = newNode;\r\n        \r\n    }\r\n\r\n    removeAt(index){\r\n        this.list.splice(index, 1);\r\n        \r\n        if (index > 0) {\r\n            this.list[index-1].nextNode = this.list[index];\r\n            if (!this.list[index-1].nextNode){this.list[index-1].nextNode = null;}\r\n        }   \r\n    }\r\n\r\n    findByKey(key) {\r\n        let matchingKey = this.list.find(node => node.value.key === key);\r\n        return matchingKey;\r\n    }\r\n}\r\n\r\nclass Node {\r\n    constructor () {\r\n        this.value = null;\r\n        this.nextNode = null;\r\n    }\r\n}\r\n\r\n\r\n\n;// ./src/HashMap.js\n\r\n\r\nclass HashMap {\r\n    constructor() {\r\n        this.capacity = 16;\r\n        this.loadFactor = .75;\r\n        this.buckets = new Array (this.capacity);\r\n    }\r\n\r\n    set(key, value) {\r\n        let keyCode = hash(key);\r\n        let newNode = new HashMap_Node(key, value);\r\n        let bucket = keyCode % 16;\r\n        indexCheck(bucket, this.buckets);\r\n\r\n        let matchingNode = hashSearch(this, key);\r\n\r\n        if (matchingNode.node !== null) {\r\n            matchingNode.node.value.value = newNode.value;\r\n        } else if(this.buckets[bucket]) {\r\n            this.buckets[bucket].append(newNode);\r\n        } else {\r\n            // Creating a new Linked List for an empty bucket\r\n            let newLinkedList = new LinkedList();\r\n            newLinkedList.append(newNode);\r\n            this.buckets[bucket] = newLinkedList;\r\n        }\r\n\r\n        if (this.length() >= (this.loadFactor * this.capacity)) {\r\n            console.log (`expanding HashMap`);\r\n            let newBuckets = new Array (this.capacity * 2);\r\n            for (let i = 0; i < this.buckets.length; i++) {\r\n                newBuckets[i] = this.buckets[i];\r\n            }\r\n            this.buckets = newBuckets;\r\n            this.capacity = newBuckets.length;\r\n        }\r\n    }\r\n\r\n    get(key){\r\n        let matchingNode = hashSearch(this, key);\r\n        if (matchingNode.node !== null) {return matchingNode.value.value}\r\n    }\r\n\r\n    has(key) {\r\n        let matchingNode = hashSearch(this, key);\r\n        if (matchingNode.node === null) {return false}\r\n        return true;\r\n    }\r\n\r\n    remove(key) {\r\n        let matchingNode = hashSearch(this, key);\r\n        if (matchingNode.node !== null) {\r\n            let index = matchingNode.matchingBucket.find(matchingNode.node);\r\n\r\n            matchingNode.matchingBucket.removeAt(index);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    length() {\r\n        let size = 0;\r\n        let existingNodes = this.buckets.filter(node => node !== undefined);\r\n        existingNodes.forEach(linkedList => {\r\n            size = size + linkedList.size();\r\n        });\r\n        return size;\r\n    }\r\n\r\n    clear() {\r\n        this.buckets = new Array (this.capacity);\r\n    }\r\n    \r\n    keys() {\r\n        let keys = [];\r\n        let existingNodes = this.buckets.filter(node => node !== undefined);\r\n        existingNodes.forEach(linkedList => {\r\n            linkedList.list.forEach(node => {\r\n                keys.push(node.value.key);\r\n            })\r\n        });\r\n\r\n        return keys;\r\n    }\r\n\r\n    values() {\r\n        let values = [];\r\n        let existingNodes = this.buckets.filter(node => node !== undefined);\r\n        existingNodes.forEach(linkedList => {\r\n            linkedList.list.forEach(node => {\r\n                values.push(node.value.value);\r\n            })\r\n        });\r\n\r\n        return values;\r\n    }\r\n\r\n    entries() {\r\n        let entries = [];\r\n        let existingNodes = this.buckets.filter(node => node !== undefined);\r\n        existingNodes.forEach(linkedList => {\r\n            linkedList.list.forEach(node => {\r\n                entries.push(node.value);\r\n            })\r\n        });\r\n\r\n        return entries;\r\n    }\r\n}\r\n\r\nclass HashMap_Node {\r\n    constructor(key, value){\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nfunction indexCheck (index, buckets) {\r\n    if (index < 0 || index >= buckets.length) {\r\n        throw new Error(\"Trying to access index out of bounds\");\r\n      }\r\n}\r\n\r\nfunction hashSearch(hashmap, key) {\r\n    // Check for a already existing node\r\n    let node = null;\r\n\r\n    let existingNodes = hashmap.buckets.filter(node => node !== undefined);\r\n    let matchingBucket = existingNodes.find(node => node.list.find(subnode => hash(subnode.value.key) === hash(key)));\r\n    if (matchingBucket !== undefined) {\r\n        node = matchingBucket.findByKey(key);\r\n        if (node === undefined) {\r\n            node = null;\r\n        }\r\n    } \r\n    return {node, matchingBucket};\r\n}\r\n\r\nfunction hash(key) {\r\n    let hashCode= 0;\r\n\r\n    const primeNumber = 31;\r\n    for (let i = 0; i < key.length; i++) {\r\n        hashCode = (primeNumber * hashCode + key.charCodeAt(i)) % 16;\r\n    }\r\n\r\n    return hashCode;\r\n}\r\n\r\n\r\n\n;// ./src/index.js\n\r\n\r\n//import \"./style.css\";\r\nconst test = new HashMap();\r\n\r\ntest.set('apple', 'red')\r\ntest.set('banana', 'yellow')\r\ntest.set('carrot', 'orange')\r\ntest.set('dog', 'brown')\r\ntest.set('elephant', 'gray')\r\ntest.set('frog', 'green')\r\ntest.set('grape', 'purple')\r\ntest.set('hat', 'black')\r\ntest.set('ice cream', 'white')\r\ntest.set('jacket', 'blue')\r\ntest.set('kite', 'pink')\r\ntest.set('lion', 'golden')\r\ntest.set('moon', 'silver')\r\n\r\n\r\nconsole.log(test.remove('dog'));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///72\n")}},__webpack_exports__={};__webpack_modules__[72]()})();